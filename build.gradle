import groovy.text.SimpleTemplateEngine
import java.util.Properties
import java.io.FileWriter
import org.apache.commons.io.FileUtils

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'commons-io:commons-io:2.4'
    }
}

project.ext.set('templateFiles', [
    "templates/application" : [
        'build.gradle',
        'gradle.properties',
        'package.json',
        'deployment/APPNAME/conf.json.template',
        'src/main/resources/i18n/en.json',
        'src/main/resources/i18n/fr.json',
        'src/main/resources/public/ts/behaviours.ts',
        'src/main/resources/mod.json',
        'src/main/resources/view-src/APPNAME.html',
        'src/main/java/ORGANISATION/APPNAME/APPNAME.java'
    ]
    ,"templates/widget" : [
        'WIDGETNAME-widget.js',
        'WIDGETNAME-widget.html',
        'i18n/en.json',
        'i18n/fr.json',
    ]
])

project.ext.set("bindings", [
    "YEAR" : Calendar.getInstance().get(Calendar.YEAR),
    'PORT' : '8130', // TODO improve port management
    'ENTCORE_VERSION' : '2.1.0'
])

// Use just for application
def moveDirectory(destDir, fileNameArray) {
    def arr = fileNameArray[0..fileNameArray.size() - 2]
    if ('APPNAME' == arr[arr.size() - 1]) {
        FileUtils.moveDirectory(
            new File("${destDir}/${arr.join('/')}"),
            new File("${destDir}/${arr[0..arr.size() - 2].join('/')}/${bindings['APPNAME'].toLowerCase()}"),
        )
    } else if ('ORGANISATION' == arr[arr.size() - 1]) {
        
        FileUtils.moveDirectory(
            new File("${destDir}/${arr.join('/')}"),
            new File("${destDir}/${arr[0..arr.size() - 2].join('/')}/${bindings['ORGANISATION'].replaceAll('[.]','/')}"),
        )
    } 
    if (arr.size() == 1) 
        return
    moveDirectory(destDir, arr)
}

// Use both for application and widget
def moveFile(destDir, fileName, binding) {
    def arr = fileName.split('/')
    if (arr[arr.size() - 1].contains(binding)) {
        def newName = arr[arr.size() - 1].replace(binding, bindings[binding].toLowerCase())
        arr = arr.size() > 1 ? arr[0..arr.size() - 2] : []
        FileUtils.moveFile(
            new File("${destDir}/${fileName}"),
            new File("${destDir}/${arr.join('/')}/${newName}")
        )
    }
}

def processTemplate(type, destDir) {
    // Copy template directroy
    FileUtils.copyDirectory(new File(type), new File(destDir), false)
    // Execute template engine with binding
    def engine = new SimpleTemplateEngine()
    templateFiles[type].each{fileName ->
        def output = engine.createTemplate(new File("${destDir}/${fileName}")).make(bindings)
        def fileWriter = new FileWriter("${destDir}/${fileName}")
        fileWriter.write(output.toString())
        fileWriter.close()
    }
}

def console = System.console()

def getValidatedInput = { condition, message, errormessage, postAction = {x -> x} ->
    if (!console) {
        logger.error "Cannot get console"
        return
    }
    def result = ""
    while(true){
        result = console.readLine(message)
        if(condition(result))
            break
        logger.error errormessage
    }
    postAction(result)
}

task createApplication(description:"Create an apllication's boilerplate") << {
    def destinatioPath = getValidatedInput(
        { input -> file(input).exists() },
        " >> Enter the destination's path : ",
        "!! Please enter a valid path"
    )
    def name = getValidatedInput(
        { input -> input ==~ /[a-zA-Z]+.*/ && !file("${destinatioPath}/${input}").exists() }, // TODO improve regexp
        " >> Enter your application's name (ex: mySuperApp) : ",
        "!! Please enter a valid name (it must match /[a-zA-Z]+.*/ and not exists in ${destinatioPath} )"
    )
    def namespace = getValidatedInput(
        { input -> input ==~ /(?:[a-z]\d*(?:\.[a-z])?)+/ }, // TODO test /(?:[a-z]\d*(?:\.[a-z])?)+/​​​​​
        " >> Enter your orgnisation's namesapce (ex : org.apache) : ",
        "!! Please enter a valid namesapce (ex org.apache)"
    )
    bindings['APPNAME'] = name[0].toUpperCase() + name[1..-1].toLowerCase()
    bindings['ORGANISATION'] = namespace
    def destDir = "${destinatioPath}/${name}".replaceAll("//","/")
    processTemplate('templates/application', destDir)
    templateFiles['templates/application'].each{fileName ->
        moveFile(destDir, fileName, 'APPNAME')
        moveDirectory(destDir, fileName.split('/'))
    }
}

task createWidget(description:"Create an widget's boilerplate") << {
    def destinatioPath = getValidatedInput(
        { input -> file(input).exists() },
        " >> Enter the destination's path : ",
        "!! Please enter a valid path"
    )
    def name = getValidatedInput(
        { input -> input ==~ /[a-zA-Z]+.*/ && !file("${destinatioPath}/${input}-widget").exists() }, // TODO improve regexp
        " >> Enter your widget's name (ex: SmallAgenda) : ",
        "!! Please enter a valid name (it must match /[a-zA-Z]+.*/ and not exists in ${destinatioPath} )"
    )
    bindings['WIDGETNAME'] = name.toLowerCase()
    def destDir = "${destinatioPath}/${name}-widget".replaceAll("//","/")
    processTemplate('templates/widget', destDir)
    templateFiles['templates/widget'].each{fileName ->
        moveFile(destDir, fileName, 'WIDGETNAME')
    }
}